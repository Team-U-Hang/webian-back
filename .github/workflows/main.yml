name: Java CI with Gradle # Workflow 이름

on: # Workflow를 자동으로 트리거 하기 위한 이벤트
  release:
    types: [push] # push를 하면 자동으로 실행
  push:
    branches: [server] # master 브랜치에서 동작
    
env:
  S3_BUCKET_NAME: uhangbk

jobs: # 병렬로 실행되는 작업 단위, 여러 step으로 이루어짐
  build:

    runs-on: ubuntu-latest # 스크립트를 작동할 OS
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3 # 재사용 가능한 워크플로 파일의 위치 및 버전
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # ./gradlw 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

     ##   create env file
    - name: create env file
      run: |
          cd ./src/main/resources
          touch security.properties
          echo "${{ secrets.PROPERTIES }}" > security.properties
      

      # 프로젝트 build
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash
     # 프로젝트 압축
    - name: Make zip file
      run: zip -r ./practice-deploy.zip .
      shell: bash
    
    # AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송
    - name: Upload to S3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip

    - name: Code Deploy
      run: aws deploy create-deployment --application-name ${{ secrets.AWS_APP_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ secrets.AWS_GROUP_NAME }} --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip

